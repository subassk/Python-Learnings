//Write code to assign to the variable map_testing all the elements in lst_check while adding the string “Fruit: ” to the beginning of each element using mapping.

lst_check = ['plums', 'watermelon', 'kiwi', 'strawberries', 'blueberries', 'peaches', 'apples', 'mangos', 'papaya']
map_testing = map(lambda item:'Fruit: '+ item,lst_check)
print(map_testing)

Output:
['Fruit: plums', 'Fruit: watermelon', 'Fruit: kiwi', 'Fruit: strawberries', 'Fruit: blueberries', 'Fruit: peaches', 'Fruit: apples', 'Fruit: mangos', 'Fruit: papaya']

Result	Actual Value	Expected Value	Notes
Pass	"['Fru...aya']"	"['Fru...aya']"	Testing that map_testing has the correct values.
Pass	'map('	'\nlst_...ting)'	Testing your code (Don't worry about actual and expected values).
Pass	'filter('	'\nlst_...ting)'	Testing your code (Don't worry about actual and expected values).
Pass	'sum('	'\nlst_...ting)'	Testing your code (Don't worry about actual and expected values).
Pass	'zip('	'\nlst_...ting)'	Testing your code (Don't worry about actual and expected values).
You passed: 100.0% of the tests



//Below, we have provided a list of strings called countries. Use filter to produce a list called b_countries that only contains the strings from countries that begin with B.
item
countries = ['Canada', 'Mexico', 'Brazil', 'Chile', 'Denmark', 'Botswana', 'Spain', 'Britain', 'Portugal', 'Russia', 'Thailand', 'Bangladesh', 'Nigeria', 'Argentina', 'Belarus', 'Laos', 'Australia', 'Panama', 'Egypt', 'Morocco', 'Switzerland', 'Belgium']

b_countries = []
b_countries = filter(lambda item:'B' in item,countries)
print(b_countries)

Output:
['Brazil', 'Botswana', 'Britain', 'Bangladesh', 'Belarus', 'Belgium']

Result	Actual Value	Expected Value	Notes
Pass	"['Bra...ium']"	"['Bra...ium']"	Testing that b_countries is correct.
Pass	'map('	'\ncoun...ries)'	Testing your code (Don't worry about actual and expected values).
Pass	'filter('	'\ncoun...ries)'	Testing your code (Don't worry about actual and expected values).
Pass	'sum('	'\ncoun...ries)'	Testing your code (Don't worry about actual and expected values).
Pass	'zip('	'\ncoun...ries)'	Testing your code (Don't worry about actual and expected values).
You passed: 100.0% of the tests


//Below, we have provided a list of tuples that contain the names of Game of Thrones characters. Using list comprehension, create a list of strings called first_names that contains only the first names of everyone in the original list.
people = [('Snow', 'Jon'), ('Lannister', 'Cersei'), ('Stark', 'Arya'), ('Stark', 'Robb'), ('Lannister', 'Jamie'), ('Targaryen', 'Daenerys'), ('Stark', 'Sansa'), ('Tyrell', 'Margaery'), ('Stark', 'Eddard'), ('Lannister', 'Tyrion'), ('Baratheon', 'Joffrey'), ('Bolton', 'Ramsey'), ('Baelish', 'Peter')]
first_names = []
first_names = [name[1] for name in people]
print(first_names)

OUtput:
['Jon', 'Cersei', 'Arya', 'Robb', 'Jamie', 'Daenerys', 'Sansa', 'Margaery', 'Eddard', 'Tyrion', 'Joffrey', 'Ramsey', 'Peter']

Result	Actual Value	Expected Value	Notes
Pass	"['Jon...ter']"	"['Jon...ter']"	Testing that first_names is correct.
Pass	'map('	'\npeop...ames)'	Testing your code (Don't worry about actual and expected values).
Pass	'filter('	'\npeop...ames)'	Testing your code (Don't worry about actual and expected values).
Pass	'sum('	'\npeop...ames)'	Testing your code (Don't worry about actual and expected values).
Pass	'zip('	'\npeop...ames)'	Testing your code (Don't worry about actual and expected values).
You passed: 100.0% of the tests


//Use list comprehension to create a list called lst2 that doubles each element in the list, lst.
lst = [["hi", "bye"], "hello", "goodbye", [9, 2], 4]

lst2 = [(item + item) for item in lst]
print(lst2)

Output:
[['hi', 'bye', 'hi', 'bye'], 'hellohello', 'goodbyegoodbye', [9, 2, 9, 2], 8]

Result	Actual Value	Expected Value	Notes
Pass	"[['hi...], 8]"	"[['hi...], 8]"	Testing that lst2 is assigned to correct values
Pass	'map('	'\nlst ...st2)\n'	Testing your code (Don't worry about actual and expected values).
Pass	'filter('	'\nlst ...st2)\n'	Testing your code (Don't worry about actual and expected values).
Pass	'sum('	'\nlst ...st2)\n'	Testing your code (Don't worry about actual and expected values).
Pass	'zip('	'\nlst ...st2)\n'	Testing your code (Don't worry about actual and expected values).
You passed: 100.0% of the tests





